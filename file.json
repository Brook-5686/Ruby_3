[{"type":"Issue","check_name":"Brakeman/Deserialize","description":"Marshal.load called with parameter value","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/password_resets_controller.rb","lines":{"begin":5,"end":5}},"content":{"body":"# Unsafe Deserialization\n\nObjects in Ruby may be serialized to strings. The main method for doing so is the built-in `Marshal` class. The `YAML`, `JSON`, and `CSV` libraries also have methods for dumping Ruby objects into strings, and then creating objects from those strings.\n\nDeserialization of arbitrary objects can lead to [remote code execution][0], as was demonstrated with [CVE-2013-0156][1].\n\nBrakeman warns when loading user input with `Marshal`, `YAML`, or `CSV`. `JSON` is covered by the checks for [CVE-2013-0333][2]\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: http://brakemanscanner.org/docs/warning_types/remote_code_execution\n[1]: https://groups.google.com/d/msg/rubyonrails-security/61bkgvnSGTQ/nehwjA8tQ8EJ\n[2]: https://groups.google.com/d/msg/rubyonrails-security/1h2DR63ViGo/GOUVafeaF1IJ\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/Execute","description":"Possible command injection","categories":["Security"],"remediation_points":500000,"location":{"path":"app/models/benefits.rb","lines":{"begin":14,"end":14}},"content":{"body":"# Command Injection\n\nInjection is \\#1 on the 2010 [OWASP Top Ten][0] web security risks. Command injection occurs when shell commands unsafely include user-manipulatable values.\n\nThere are many ways to run commands in Ruby:\n\n    `ls #{params[:file]}`\n\n    system(\"ls #{params[:dir]}\")\n\n    exec(\"md5sum #{params[:input]}\")\n\n\nBrakeman will warn on any method like these that uses user input or unsafely interpolates variables.\n\nSee [the Ruby Security Guide][1] for details.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: https://www.owasp.org/index.php/Top_10_2010-A1\n[1]: http://guides.rubyonrails.org/security.html#command-line-injection\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/MassAssignment","description":"Parameters should be whitelisted for mass assignment","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/users_controller.rb","lines":{"begin":58,"end":58}},"content":{"body":"# Mass Assignment\n\nMass assignment is a feature of Rails which allows an application to create a record from the values of a hash.\n\nExample:\n\n    User.new(params[:user])\n\n\nUnfortunately, if there is a user field called `admin` which controls administrator access, now any user can make themselves an administrator.\n\n`attr_accessible` and `attr_protected` can be used to limit mass assignment. However, Brakeman will warn unless `attr_accessible` is used, or mass assignment is completely disabled.\n\nThere are two different mass assignment warnings which can arise. The first is when mass assignment actually occurs, such as the example above. This results in a warning like\n\n    Unprotected mass assignment near line 61: User.new(params[:user])\n\n\nThe other warning is raised whenever a model is found which does not use `attr_accessible`. This produces generic warnings like\n\n    Mass assignment is not restricted using attr_accessible\n\n\nwith a list of affected models.\n\nIn Rails 3.1 and newer, mass assignment can easily be disabled:\n\n    config.active_record.whitelist_attributes = true\n\n\nUnfortunately, it can also easily be bypassed:\n\n    User.new(params[:user], :without_protection =\u003e true)\n\n\nBrakeman will warn on uses of `without_protection`.\n\nPlease see [this page][0] for more details.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: http://railspikes.com/2008/9/22/is-your-rails-application-safe-from-mass-assignment\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/Render","description":"Render path contains parameter value","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/dashboard_controller.rb","lines":{"begin":27,"end":27}},"content":{"body":"Read more: http://brakemanscanner.org/docs/warning_types/dynamic_render_path/"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/Send","description":"User controlled method execution","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/dashboard_controller.rb","lines":{"begin":14,"end":14}},"content":{"body":"# Dangerous Send\n\nUsing unfiltered user data to select a Class or Method to be dynamically sent is dangerous.\n\nIt is much safer to whitelist the desired target or method.\n\nUnsafe use of method:\n\n    method = params[:method]\n    @result = User.send(method.to_sym)\n\n\nSafe:\n\n    method = params[:method] == 1 ? :method_a : :method_b\n    @result = User.send(method, *args)\n\n\nUnsafe use of target:\n\n    table = params[:table]\n    model = table.classify.constantize\n    @result = model.send(:method)\n\n\nSafe:\n\n    target = params[:target] == 1 ? Account : User\n    @result = target.send(:method, *args)\n\n\nIncluding user data in the arguments passed to an Object\\#send is safe, as long as the method can properly handle potentially bad data.\n\nSafe:\n\n    args = params[\"args\"] || []\n    @result = User.send(:method, *args)\n\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/SendFile","description":"Parameter value used in file name","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/benefit_forms_controller.rb","lines":{"begin":11,"end":11}},"content":{"body":"# File Access\n\nUsing user input when accessing files (local or remote) will raise a warning in Brakeman.\n\nFor example\n\n    File.open(\"/tmp/#{cookie[:file]}\")\n\n\nwill raise an error like\n\n    Cookie value used in file name near line 4: File.open(\"/tmp/#{cookie[:file]}\")\n\n\nThis type of vulnerability can be used to access arbitrary files on a server (including `/etc/passwd`.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/SQL","description":"Possible SQL injection","categories":["Security"],"remediation_points":500000,"location":{"path":"app/models/analytics.rb","lines":{"begin":2,"end":2}},"content":{"body":"# SQL Injection\n\nInjection is \\#1 on the 2010 [OWASP Top Ten][0] web security risks. SQL injection is when a user is able to manipulate a value which is used unsafely inside a SQL query. This can lead to data leaks, data loss, elevation of privilege, and other unpleasant outcomes.\n\nBrakeman focuses on ActiveRecord methods dealing with building SQL statements.\n\nA basic (Rails 2.x) example looks like this:\n\n    User.first(:conditions =\u003e \"username = '#{params[:username]}'\")\n\n\nBrakeman would produce a warning like this:\n\n    Possible SQL injection near line 30: User.first(:conditions =\u003e (\"username = '#{params[:username]}'\"))\n\n\nThe safe way to do this query is to use a parameterized query:\n\n    User.first(:conditions =\u003e [\"username = ?\", params[:username]])\n\n\nBrakeman also understands the new Rails 3.x way of doing things (and local variables and concatentation):\n\n    username = params[:user][:name].downcase\n    password = params[:user][:password]\n\n    User.first.where(\"username = '\" + username + \"' AND password = '\" + password + \"'\")\n\n\nThis results in this kind of warning:\n\n    Possible SQL injection near line 37:\n    User.first.where(((((\"username = '\" + params[:user][:name].downcase) + \"' AND password = '\") + params[:user][:password]) + \"'\"))\n\n\nSee [the Ruby Security Guide][1] for more information and [Rails-SQLi.org][2] for many examples of SQL injection in Rails.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: https://www.owasp.org/index.php/Top_10_2010-A1\n[1]: http://guides.rubyonrails.org/security.html#sql-injection\n[2]: http://rails-sqli.org\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/SQL","description":"Possible SQL injection","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/users_controller.rb","lines":{"begin":35,"end":35}},"content":{"body":"# SQL Injection\n\nInjection is \\#1 on the 2010 [OWASP Top Ten][0] web security risks. SQL injection is when a user is able to manipulate a value which is used unsafely inside a SQL query. This can lead to data leaks, data loss, elevation of privilege, and other unpleasant outcomes.\n\nBrakeman focuses on ActiveRecord methods dealing with building SQL statements.\n\nA basic (Rails 2.x) example looks like this:\n\n    User.first(:conditions =\u003e \"username = '#{params[:username]}'\")\n\n\nBrakeman would produce a warning like this:\n\n    Possible SQL injection near line 30: User.first(:conditions =\u003e (\"username = '#{params[:username]}'\"))\n\n\nThe safe way to do this query is to use a parameterized query:\n\n    User.first(:conditions =\u003e [\"username = ?\", params[:username]])\n\n\nBrakeman also understands the new Rails 3.x way of doing things (and local variables and concatentation):\n\n    username = params[:user][:name].downcase\n    password = params[:user][:password]\n\n    User.first.where(\"username = '\" + username + \"' AND password = '\" + password + \"'\")\n\n\nThis results in this kind of warning:\n\n    Possible SQL injection near line 37:\n    User.first.where(((((\"username = '\" + params[:user][:name].downcase) + \"' AND password = '\") + params[:user][:password]) + \"'\"))\n\n\nSee [the Ruby Security Guide][1] for more information and [Rails-SQLi.org][2] for many examples of SQL injection in Rails.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: https://www.owasp.org/index.php/Top_10_2010-A1\n[1]: http://guides.rubyonrails.org/security.html#sql-injection\n[2]: http://rails-sqli.org\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/UnsafeReflection","description":"Unsafe reflection method constantize called with parameter value","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/api/v1/mobile_controller.rb","lines":{"begin":9,"end":9}},"content":{"body":"# Remote Code Execution\n\nBrakeman reports on several cases of remote code execution, in which a user is able to control and execute code in ways unintended by application authors.\n\nThe obvious form of this is the use of `eval` with user input.\n\nHowever, Brakeman also reports on dangerous uses of `send`, `constantize`, and other methods which allow creation of arbitrary objects or calling of arbitrary methods.\n\nPlease see [this blog post][0] about the dangers of `constantize` and related methods.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: http://blog.conviso.com.br/2013/02/exploiting-unsafe-reflection-in.html\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/UnsafeReflection","description":"Unsafe reflection method constantize called with parameter value","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/api/v1/mobile_controller.rb","lines":{"begin":16,"end":16}},"content":{"body":"# Remote Code Execution\n\nBrakeman reports on several cases of remote code execution, in which a user is able to control and execute code in ways unintended by application authors.\n\nThe obvious form of this is the use of `eval` with user input.\n\nHowever, Brakeman also reports on dangerous uses of `send`, `constantize`, and other methods which allow creation of arbitrary objects or calling of arbitrary methods.\n\nPlease see [this blog post][0] about the dangers of `constantize` and related methods.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: http://blog.conviso.com.br/2013/02/exploiting-unsafe-reflection-in.html\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/UnsafeReflection","description":"Unsafe reflection method constantize called with parameter value","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/benefit_forms_controller.rb","lines":{"begin":10,"end":10}},"content":{"body":"# Remote Code Execution\n\nBrakeman reports on several cases of remote code execution, in which a user is able to control and execute code in ways unintended by application authors.\n\nThe obvious form of this is the use of `eval` with user input.\n\nHowever, Brakeman also reports on dangerous uses of `send`, `constantize`, and other methods which allow creation of arbitrary objects or calling of arbitrary methods.\n\nPlease see [this blog post][0] about the dangers of `constantize` and related methods.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: http://blog.conviso.com.br/2013/02/exploiting-unsafe-reflection-in.html\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/CrossSiteScripting","description":"Unescaped cookie value","categories":["Security"],"remediation_points":500000,"location":{"path":"app/views/layouts/application.html.erb","lines":{"begin":12,"end":12}},"content":{"body":"# Cross Site Scripting\n\nCross site scripting (or XSS) is \\#2 on the 2010 [OWASP Top Ten][0] web security risks and it pops up nearly everywhere.\n\nXSS occurs when a user-manipulatable value is displayed on a web page without escaping it, allowing someone to inject Javascript or HTML into the page.\n\nIn Rails 2.x, values need to be explicitly escaped (e.g., by using the `h` method). In Rails 3.x, auto-escaping in views is enabled by default. However, one can still use the `raw` method to output a value directly.\n\nSee [the Ruby Security Guide][1] for more details.\n\n### Query Parameters and Cookies\n\nRails 2.x example in ERB:\n\n    \u003c%= params[:query] %\u003e\n\n\nBrakeman looks for several situations that can allow XSS. The simplest is like the example above: a value from the `params` or `cookies` is being directly output to a view. In such cases, it will issue a warning like:\n\n    Unescaped parameter value near line 3: params[:query]\n\n\nBy default, Brakeman will also warn when a parameter or cookie value is used as an argument to a method, the result of which is output unescaped to a view.\n\nFor example:\n\n    \u003c%= some_method(cookie[:name]) %\u003e\n\n\nThis raises a warning like:\n\n    Unescaped cookie value near line 5: some_method(cookies[:oreo])\n\n\nHowever, the confidence level for this warning will be weak, because it is not directly outputting the cookie value.\n\nSome methods are known to Brakeman to either be dangerous (`link_to` is one) or safe (`escape_once`). Users can specify safe methods using the `--safe-methods` option. Alternatively, Brakeman can be set to _only_ warn when values are used directly with the `--report-direct` option.\n\n### Model Attributes\n\nBecause (many) models come from database values, Brakeman mistrusts them by default.\n\nFor example, if `@user` is an instance of a model set in an action like\n\n    def set_user\n      @user = User.first\n    end\n\n\nand there is a view with\n\n    \u003c%= @user.name %\u003e\n\n\nBrakeman will raise a warning like\n\n    Unescaped model attribute near line 3: User.first.name\n\n\nIf you trust all your data (although you probably shouldn't), this can be disabled with `--ignore-model-output`.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: https://www.owasp.org/index.php/Top_10_2010-A2\n[1]: http://guides.rubyonrails.org/security.html#cross-site-scripting-xss\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/ForgerySetting","description":"'protect_from_forgery' should be called in ApplicationController","categories":["Security"],"remediation_points":500000,"location":{"path":"app/controllers/application_controller.rb","lines":{"begin":null,"end":null}},"content":{"body":"# Cross Site Request Forgery\n\nCross-site request forgery is \\#5 on the [OWASP Top Ten][0]. CSRF allows an attacker to perform actions on a website as if they are an authenticated user.\n\nThis warning is raised when no call to `protect_from_forgery` is found in `ApplicationController`. This method prevents CSRF.\n\nFor Rails 4 applications, it is recommended that you use `protect_from_forgery :with =\u003e :exception`. This code is inserted into newly generated applications. The default is to `nil` out the session object, which has been a source of many CSRF bypasses due to session memoization.\n\nSee [the Ruby Security Guide][1] for details.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: https://www.owasp.org/index.php/Top_10_2010-A5\n[1]: http://guides.rubyonrails.org/security.html#cross-site-request-forgery-csrf\n"},"engine_name":"brakeman"},
{"type":"Issue","check_name":"Brakeman/ValidationRegex","description":"Insufficient validation for 'email' using /.+@.+\\..+/i. Use \\A and \\z as anchors","categories":["Security"],"remediation_points":500000,"location":{"path":"app/models/user.rb","lines":{"begin":17,"end":17}},"content":{"body":"# Format Validation\n\nCalls to `validates_format_of ..., :with =\u003e //` which do not use `\\A` and `\\z` as anchors will cause this warning. Using `^` and `$` is not sufficient, as they will only match up to a new line. This allows an attacker to put whatever malicious input they would like before or after a new line character.\n\nSee [the Ruby Security Guide][0] for details.\n\n---\nSource: http://brakemanscanner.org (CC BY 3.0)\n\n[0]: http://guides.rubyonrails.org/security.html#regular-expressions\n"},"engine_name":"brakeman"}]
